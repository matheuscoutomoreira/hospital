// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using serviçohospital.Context;

#nullable disable

namespace serviçohospital.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20250512235737_Inicial")]
    partial class Inicial
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.1")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            MySqlModelBuilderExtensions.AutoIncrementColumns(modelBuilder);

            modelBuilder.Entity("Historico", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("Data")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("PacienteId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("PacienteId")
                        .IsUnique();

                    b.ToTable("Historicos");
                });

            modelBuilder.Entity("Prescricao", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("ID"));

                    b.Property<int>("ConsultaID")
                        .HasColumnType("int");

                    b.Property<DateTime>("DataPrescricao")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Dosagem")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<int>("HistoricoId")
                        .HasColumnType("int");

                    b.Property<string>("Medicamento")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("varchar(200)");

                    b.HasKey("ID");

                    b.HasIndex("ConsultaID");

                    b.HasIndex("HistoricoId");

                    b.ToTable("Prescricoes");
                });

            modelBuilder.Entity("serviçohospital.Models.Administracao", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Cargo")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.HasKey("Id");

                    b.ToTable("Administracoes");
                });

            modelBuilder.Entity("serviçohospital.Models.Consulta", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("DataHora")
                        .HasColumnType("datetime(6)");

                    b.Property<int?>("HistoricoId")
                        .HasColumnType("int");

                    b.Property<string>("Observacoes")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int>("PacienteId")
                        .HasColumnType("int");

                    b.Property<int>("ProfissionalSaudeId")
                        .HasColumnType("int");

                    b.Property<string>("Prontuario")
                        .HasColumnType("longtext");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<string>("TipoConsulta")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.HasIndex("HistoricoId");

                    b.HasIndex("PacienteId");

                    b.HasIndex("ProfissionalSaudeId");

                    b.ToTable("Consultas");
                });

            modelBuilder.Entity("serviçohospital.Models.Paciente", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("CPF")
                        .IsRequired()
                        .HasMaxLength(14)
                        .HasColumnType("varchar(14)");

                    b.Property<DateTime>("DataNascimento")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("Telefone")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("varchar(15)");

                    b.HasKey("Id");

                    b.ToTable("Pacientes");
                });

            modelBuilder.Entity("serviçohospital.Models.ProfissionalSaude", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("CRM")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("varchar(10)");

                    b.Property<string>("Especialidade")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.HasKey("Id");

                    b.ToTable("Profissionais");
                });

            modelBuilder.Entity("serviçohospital.Models.Seguranca", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Acao")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<DateTime>("DataHora")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("UsuarioId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UsuarioId");

                    b.ToTable("Segurancas");
                });

            modelBuilder.Entity("serviçohospital.Models.Usuario", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("AdministracaoId")
                        .HasColumnType("int");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<int?>("PacienteId")
                        .HasColumnType("int");

                    b.Property<int?>("ProfissionalSaudeId")
                        .HasColumnType("int");

                    b.Property<string>("Senha")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<int>("Tipo")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("AdministracaoId");

                    b.HasIndex("PacienteId");

                    b.HasIndex("ProfissionalSaudeId");

                    b.ToTable("Usuarios");
                });

            modelBuilder.Entity("Historico", b =>
                {
                    b.HasOne("serviçohospital.Models.Paciente", "Paciente")
                        .WithOne("Historico")
                        .HasForeignKey("Historico", "PacienteId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Paciente");
                });

            modelBuilder.Entity("Prescricao", b =>
                {
                    b.HasOne("serviçohospital.Models.Consulta", "consulta")
                        .WithMany("Prescricoes")
                        .HasForeignKey("ConsultaID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Historico", "Historico")
                        .WithMany()
                        .HasForeignKey("HistoricoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Historico");

                    b.Navigation("consulta");
                });

            modelBuilder.Entity("serviçohospital.Models.Consulta", b =>
                {
                    b.HasOne("Historico", null)
                        .WithMany("Consultas")
                        .HasForeignKey("HistoricoId");

                    b.HasOne("serviçohospital.Models.Paciente", "Paciente")
                        .WithMany("Consultas")
                        .HasForeignKey("PacienteId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("serviçohospital.Models.ProfissionalSaude", "Profissional")
                        .WithMany("Consultas")
                        .HasForeignKey("ProfissionalSaudeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Paciente");

                    b.Navigation("Profissional");
                });

            modelBuilder.Entity("serviçohospital.Models.Seguranca", b =>
                {
                    b.HasOne("serviçohospital.Models.Usuario", "Usuario")
                        .WithMany()
                        .HasForeignKey("UsuarioId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Usuario");
                });

            modelBuilder.Entity("serviçohospital.Models.Usuario", b =>
                {
                    b.HasOne("serviçohospital.Models.Administracao", "Administracao")
                        .WithMany()
                        .HasForeignKey("AdministracaoId");

                    b.HasOne("serviçohospital.Models.Paciente", "Paciente")
                        .WithMany()
                        .HasForeignKey("PacienteId");

                    b.HasOne("serviçohospital.Models.ProfissionalSaude", "ProfissionalSaude")
                        .WithMany()
                        .HasForeignKey("ProfissionalSaudeId");

                    b.Navigation("Administracao");

                    b.Navigation("Paciente");

                    b.Navigation("ProfissionalSaude");
                });

            modelBuilder.Entity("Historico", b =>
                {
                    b.Navigation("Consultas");
                });

            modelBuilder.Entity("serviçohospital.Models.Consulta", b =>
                {
                    b.Navigation("Prescricoes");
                });

            modelBuilder.Entity("serviçohospital.Models.Paciente", b =>
                {
                    b.Navigation("Consultas");

                    b.Navigation("Historico")
                        .IsRequired();
                });

            modelBuilder.Entity("serviçohospital.Models.ProfissionalSaude", b =>
                {
                    b.Navigation("Consultas");
                });
#pragma warning restore 612, 618
        }
    }
}
